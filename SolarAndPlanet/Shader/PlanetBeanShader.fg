#version 330 core
out vec4 color;
struct Material{
	float shininess;
};
struct Light{
	vec3 LightDirection;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};
in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;

uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform Material material;
uniform Light light;
uniform vec3 viewPos;

void main(){
	vec3 ambient=light.ambient*vec3(texture(texture_diffuse1,TexCoords));

	vec3 normal=normalize(Normal);
	vec3 lightDir=normalize(-light.LightDirection);
	float diff=max(dot(normal,lightDir),0.0f);
	vec3 diffuse=light.diffuse*diff*vec3(texture(texture_diffuse1,TexCoords));

	vec3 viewDir=normalize(viewPos-FragPos);
	//vec3 reflectDir=reflect(-lightDir,normal);
	vec3 halfwayDir=normalize(lightDir+viewDir);
	//通过削弱spec值完成镜面反射弱化
	float spec=pow(max(dot(normal,halfwayDir),0.0f),material.shininess);
	vec3 specular=0.3f*light.specular*spec*vec3(texture(texture_diffuse1,TexCoords));

	color=vec4(ambient+diffuse+specular,1.0f);

}